# Seed needs to be set at top of yaml, before objects with parameters are made
seed: 1986
__set_seed: !!python/object/apply:torch.manual_seed [!ref <seed>]

# If you plan to train a system on an HPC cluster with a big dataset,
# we strongly suggest doing the following:
# 1- Compress the dataset in a single tar or zip file.
# 2- Copy your dataset locally (i.e., the local disk of the computing node).
# 3- Uncompress the dataset in the local folder.
# 4- Set data_folder with the local path.
# Reading data from the local disk of the compute node (e.g. $SLURM_TMPDIR with SLURM-based clusters) is very important.
# It allows you to read the data much faster without slowing down the shared filesystem.
data_folder: ./data
output_folder: !ref ./results/<seed>
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

# Path where data manifest files will be stored
# The data manifest files are created by the data preparation script.
train_annotation: !ref <data_folder>/train.json
valid_annotation: !ref <data_folder>/valid.json
test_annotation: !ref <data_folder>/test.json

# The train logger writes training statistics to a file, as well as stdout.
train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

error_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.classification_error
        reduction: batch

ckpt_interval_minutes: 15 # save checkpoint every N min

# Training Parameters
sample_rate: 16000
number_of_epochs: 35
batch_size: 1

encoder_lr_start: 0.0005
worker_lr_start: 0.0005
decay_factor: 0.5
halved_epochs: 30

 # dimensionality of the embeddings
emb_dim: 100

dataloader_options:
    batch_size: !ref <batch_size>

# Added noise and reverb come from OpenRIR dataset, automatically
# downloaded and prepared with this Environmental Corruption class.
env_corrupt: !new:speechbrain.lobes.augment.EnvCorrupt
    openrir_folder: !ref <data_folder>
    babble_prob: 0.0
    reverb_prob: 0.0
    noise_prob: 1.0
    noise_snr_low: 0
    noise_snr_high: 15

# Adds speech change + time and frequency dropouts (time-domain implementation)
# # A small speed change help to improve the performance of speaker-id as well.
augmentation: !new:speechbrain.lobes.augment.TimeDomainSpecAugment
    sample_rate: !ref <sample_rate>
    speeds: [95, 100, 105]

MFCC: !new:speechbrain.lobes.features.MFCC
    n_mfcc: 20
    n_mels: 40

# Models definition
encoder_model: !new:models.encoders.PASEEncoder
    use_sincnet: True
    in_channels: 1
    blocks_channels: [64, 64, 128, 128, 256, 256, 512, 512, !ref <emb_dim>]
    blocks_kernel_sizes: [251, 21, 11, 11, 11, 11, 11, 11, 1]
    blocks_strides: [1, 10, 2, 1, 2, 1, 2, 2, 1]

decoder_worker: !new:models.workers.WaveformWorker
    in_channels: !ref <emb_dim>
    decoder_blocks: 3
    decoder_channels: [512, 256, 128]
    decoder_kernel_sizes: [30, 30, 30]
    decoder_strides: [4, 4, 10]
    lin_neurons: 256

mfcc_worker: !new:models.workers.MFCCWorker
    input_size: 100
    lin_blocks: 1
    lin_neurons: 256
    out_neurons: 660

worker_models:
    regression:
        decoder: !ref <decoder_worker>
        # mfcc: !ref <mfcc_worker>

worker_losses:
    regression:
        decoder: L1Loss
        # mfcc: MSELoss

# The first object passed to the Brain class is this "Epoch Counter"
# which is saved by the Checkpointer so that training can be resumed
# if it gets interrupted at any point.
epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

# Objects in "modules" dict will have their parameters moved to the correct
# device, as well as having train()/eval() called on them by the Brain class.
modules:
    env_corrupt: !ref <env_corrupt>
    augmentation: !ref <augmentation>
    encoder: !ref <encoder_model>
    workers: !ref <worker_models>

# This optimizer will be constructed by the Brain class after all parameters
# are moved to the correct device. Then it will be added to the checkpointer.
opt_classes:
    encoder: !name:torch.optim.Adam
        lr: !ref <encoder_lr_start>
    workers:
        regression:
            decoder: !name:torch.optim.Adam
                lr: !ref <worker_lr_start>
            # mfcc: !name:torch.optim.Adam
            #     lr: !ref <worker_lr_start>

# lr_annealing: !new:speechbrain.nnet.schedulers.LinearScheduler
#     initial_value: !ref <lr_start>
#     final_value: !ref <lr_final>
#     epoch_count: !ref <number_of_epochs>
lr_annealing:
    encoder: !new:speechbrain.nnet.schedulers.StepScheduler
        initial_value: !ref <encoder_lr_start>
        decay_factor: !ref <decay_factor>
        decay_drop: !ref <halved_epochs> + 1
    workers: !new:speechbrain.nnet.schedulers.StepScheduler
        initial_value: !ref <encoder_lr_start>
        decay_factor: !ref <decay_factor>
        decay_drop: !ref <halved_epochs> + 1

# This object is used for saving the state of training both so that it
# can be resumed if it gets interrupted, and also so that the best checkpoint
# can be later loaded for evaluation or inference.
checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        encoder: !ref <encoder_model>
        decoder_worker: !ref <decoder_worker>
        # mfcc_worker: !ref <mfcc_worker>
        counter: !ref <epoch_counter>
